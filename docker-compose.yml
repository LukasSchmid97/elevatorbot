version: "3.9"

services:
  redis:
    image: redis:6.2.7
    command: ["redis-server", "--maxmemory", "1gb", "--maxmemory-policy", "allkeys-lru"]
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - ./redis.conf:/redis.conf
    networks:
      - redis-network
    restart:
      always

  postgres:
    image: postgres:14.5
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - ./Database:/var/lib/postgresql/data
      - ./postgresStartupScript.sql:/docker-entrypoint-initdb.d/postgresStartupScript.sql
    environment:
      - POSTGRES_DB
      - POSTGRES_USER
      - POSTGRES_PASSWORD
    networks:
      - database-network
    restart:
      always
    healthcheck:
      test: pg_isready -U postgres

  postgresbackups:
    image: prodrigestivill/postgres-backup-local
    volumes:
      - ./DatabaseBackups:/backups
    environment:
      - POSTGRES_DB
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_HOST
      - POSTGRES_PORT
      - SCHEDULE=@daily
      - BACKUP_KEEP_DAYS=7
      - BACKUP_KEEP_WEEKS=4
      - BACKUP_KEEP_MONTHS=6
    networks:
      - database-network
    restart:
      always
    depends_on:
      postgres:
        condition: service_healthy

  prometheus:
    image: prom/prometheus:latest
    user: root
    expose:
      - 9090
    ports:
      - "9090:9090"
    volumes:
      - ./Stats/prometheus/prometheus.yml:/prometheus/prometheus.yml
      - ./Prometheus:/prometheus
    command:
      - '--config.file=/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.size=10GB'
      - "--storage.tsdb.retention.time=60d"
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart:
      unless-stopped
    networks:
      - prometheus-network

  grafana:
    image: grafana/grafana:latest
    expose:
      - 3030
    ports:
      - "3030:3000"
    volumes:
      - ./Grafana:/grafana
      - ./Stats/grafana/provisioning/:/grafana/provisioning/
      - ./Stats/grafana/grafana.ini:/etc/grafana/grafana.ini
    environment:
      - BACKEND_HOST
    restart:
      unless-stopped
    networks:
      - prometheus-network

  backend:
    build:
      context: ./
      dockerfile: Backend/Dockerfile
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    volumes:
      - ./Logs/Backend:/app/Logs/Backend
    environment:
      - POSTGRES_DB
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_HOST
      - POSTGRES_PORT
      - BACKEND_HOST
      - BACKEND_PORT
      - ELEVATOR_HOST
      - ELEVATOR_PORT
      - REDIS_HOST
      - REDIS_PORT
      - COLUMNS
    networks:
      - database-network
      - backend-network
      - redis-network
      - prometheus-network
    restart:
      unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${BACKEND_PORT}/health_check" ]
      timeout: 5s
    depends_on:
      postgres:
        condition: service_healthy
      postgresbackups:
        condition: service_started
      redis:
        condition: service_started
      prometheus:
        condition: service_started

  website:
    build:
      context: ./
      dockerfile: ./Website/Dockerfile
    ports:
      - "${WEBSITE_PORT}:${WEBSITE_PORT}"
    volumes:
      - ./Logs/Website:/app/Website/logs
    environment:
      - BACKEND_HOST
      - BACKEND_PORT
      - WEBSITE_HOST
      - WEBSITE_PORT
      - ELEVATOR_HOST
      - ELEVATOR_PORT
    networks:
      - backend-network
      - website-network
    restart:
      unless-stopped
    depends_on:
      backend:
        condition: service_healthy

  elevator:
    build:
      context: ./
      dockerfile: ./ElevatorBot/Dockerfile
    ports:
      - "${ELEVATOR_PORT}:${ELEVATOR_PORT}"
    volumes:
      - ./Logs/ElevatorBot:/app/Logs/ElevatorBot
    environment:
      - MAX_WORKERS
      - BACKEND_HOST
      - BACKEND_PORT
      - WEBSITE_HOST
      - WEBSITE_PORT
      - ELEVATOR_HOST
      - ELEVATOR_PORT
      - REDIS_HOST
      - REDIS_PORT
      - COLUMNS
    networks:
      - backend-network
      - elevator-network
      - website-network
      - redis-network
      - prometheus-network
    restart:
      unless-stopped
    depends_on:
      backend:
        condition: service_healthy
      redis:
        condition: service_started
      prometheus:
        condition: service_started

networks:
  backend-network:
  elevator-network:
  website-network:
  database-network:
  redis-network:
  prometheus-network:
